---
description: "Alive Progress implementation patterns for smooth, performant progress bars"
globs: ["**/*.py"]
alwaysApply: false
---

# Alive Progress Rules

Use these patterns when implementing `alive-progress` in Python scripts based on project conventions.

## Standard Configuration

Always use this exact configuration for consistency:

```python
with alive_bar(
    total_count,
    title="🚀 Processing work",
    spinner="waves", 
    dual_line=True,
    force_tty=True,
    refresh_secs=0.05
) as bar:
    # processing logic
    pass
```

## Batch Processing Pattern

Process items in batches to prevent animation lag:

```python
# Process in batches of 2-50 items - or better, batch for the context you are in
BATCH_SIZE = 4
batches = create_batches(items, BATCH_SIZE)

with alive_bar(len(batches), title="📦 Processing batches", force_tty=True) as bar:
    for batch in batches:
        process_batch(batch)
        # Update text only once per batch
        bar.text = f"✅ {processed_count}/{total_count} items"
        bar()
```

## Text Update Rules

- Update `bar.text` only 2-3 times per batch maximum
- Use meaningful status changes, not rapid updates
- Include emoji for visual clarity
- Show progress ratios: `✅ 150/500 processed`

```python
# Good: Sparse, meaningful updates
bar.text = f"📦 Batch {batch_id}/{total_batches} | ✅ {success_count} | ❌ {fail_count}"

# Avoid: Text updates in tight loops  
for item in items:
    bar.text = f"Processing {item}"  # Too frequent
```

## Database Processing Pattern

For database operations, process and commit in batches:

```python
with alive_bar(total_records, title="💾 Writing to database", force_tty=True) as bar:
    with DatabaseWriter() as db:
        for batch in batches:
            records = process_batch(batch)
            db.write_records(records)
            
            # Update once per batch
            bar.text = f"✅ {len(records)} records saved"
            for _ in records:
                bar()  # Advance for each record
```

## Error Handling Integration

Track success/failure rates in progress text:

```python
success_count = 0
fail_count = 0

with alive_bar(total_batches, title="🔍 Processing with retries", force_tty=True) as bar:
    for batch in batches:
        try:
            result = process_batch(batch)
            success_count += len(result)
            bar.text = f"✅ {success_count} success | ❌ {fail_count} failed"
        except Exception:
            fail_count += len(batch)
            bar.text = f"❌ Batch failed | Total failures: {fail_count}"
        
        bar()
```

## Performance Guidelines

- **Batch size**: 8-50 items per batch for optimal performance
- **Refresh rate**: Use `refresh_secs=0.05` for smooth animation
- **Text frequency**: Maximum 1 text update per batch
- **Bar updates**: Call `bar()` once per logical unit completed

## Visual Consistency

Use these emoji conventions:
- 🚀 Initial processing
- 📦 Batch operations  
- 💾 Database operations
- 🔍 Analysis/search
- ✅ Success counts
- ❌ Error counts
- 📊 Statistics/metrics

## Don't Do

```python
# Avoid: Too frequent updates
for item in large_list:
    process_item(item)
    bar.text = f"Item {i}"  # Every iteration
    bar()

# Avoid: Manual progress bar management
progress = alive_bar(total)
# No context manager - risky cleanup

# Avoid: Inconsistent configuration
alive_bar(total, dual_line=False)  # Different from standard
```